[{"id":0,"href":"/data-sources/","title":"Data Sources","parent":"Data for Nerds","content":""},{"id":1,"href":"/data-sources/ms-msapps-buildnumbers/","title":"Microsoft M365 Apps Builds","parent":"Data Sources","content":"Microsoft M365 Apps for Business (formerly Office 365) build numbers are in JSON format at this address: https://raw.datafornerds.io/ms/msapps/buildnumbers.json. The source of this information is this site. The data is validated hourly.\nKnown Issues    The following known issues are pending correction:\n Some Office Versions have a space in the version number Office Builds Without Years are Defaulting to 2021  Sample Data    { \u0026#34;DataForNerds\u0026#34;: { \u0026#34;LastUpdatedUTC\u0026#34;: \u0026#34;\\/Date(1625771575455)\\/\u0026#34;, \u0026#34;SourceList\u0026#34;: [\u0026#34;https://docs.microsoft.com/en-us/officeupdates/update-history-microsoft365-apps-by-date\u0026#34;] }, \u0026#34;Data\u0026#34;: [{ \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2017-12-12\u0026#34;, \u0026#34;Channel\u0026#34;: \u0026#34;Semi-Annual Enterprise\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;7766.2130\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;1701\u0026#34;, \u0026#34;FullBuild\u0026#34;: \u0026#34;16.0.7766.2130\u0026#34; }, { \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2018-08-14\u0026#34;, \u0026#34;Channel\u0026#34;: \u0026#34;Semi-Annual Enterprise\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34; 8431.2299\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;1708\u0026#34;, \u0026#34;FullBuild\u0026#34;: \u0026#34;16.0. 8431.2299\u0026#34; }, { \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2021-12-06\u0026#34;, \u0026#34;Channel\u0026#34;: \u0026#34;Current\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;8730.2122\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;1711\u0026#34;, \u0026#34;FullBuild\u0026#34;: \u0026#34;16.0.8730.2122\u0026#34; }] } Sample Usage in PowerShell    $d4n = Invoke-RestMethod -Uri \u0026#34;https://raw.datafornerds.io/ms/msapps/buildnumbers.json\u0026#34; Write-Host \u0026#34;Builds Released in Past 7 days\u0026#34; ForEach($build in $d4n.Data) { $diff = New-TimeSpan -Start (Get-Date $build.ReleaseDate) -End (Get-Date) If($diff.TotalDays -le 7) { Write-Host \u0026#34;Office 365 Version $($build.FullBuild)is $($build.Version)and was released $($build.ReleaseDate)\u0026#34; } else { \u0026lt;# Do Nothing #\u0026gt; } } "},{"id":2,"href":"/using-the-data/powerbi/","title":"Microsoft PowerBI","parent":"Using the Data","content":"The data from DataForNerds can be brought into PowerBI using the Web data source type. The following steps outline the overall steps to gather the data.\n Launch PowerBI Desktop. Create a new report or open an existing report. From the Home ribbon, select Get Data. Either select Web from the drop down (if available), or select More and then choose Web from the resulting dialog box. Enter the URL to the JSON file (e.g. https://raw.datafornerds.io/ms/mswin/releases.json) and click OK. You may be prompted for authentication parameters (you can use anonymous authentication) or be prompted to apply your new changes to the report.  The data is now available as a source within your PowerBI report that can be linked to existing data and displayed.\n"},{"id":3,"href":"/using-the-data/powershell/","title":"Microsoft PowerShell","parent":"Using the Data","content":"The data from DataForNerds can be brought into PowerShell as a Custom Object using the Invoke-RestMethod command and passing it the JSON URL as the uri parameter. For example:\n$d4n = Invoke-RestMethod -Uri \u0026#34;https://raw.datafornerds.io/ms/mswin/releases.json\u0026#34; The resulting object typically have two properties:\n   Property Purpose     DataForNerds Metadata containing at least the information about the last time the content was updated (LastUpdatedUTC property) and where we got the information from (SourceList property).   Data The actual data you\u0026rsquo;re looking for.    To view the data in PowerShell, output the data property. For example:\n$d4n = Invoke-RestMethod -Uri \u0026#34;https://raw.datafornerds.io/ms/mswin/releases.json\u0026#34; $d4n.Data | Format-Table -AutoSize You can use the Data property like any other array of objects in PowerShell. It can be viewed, sorted, queried, exported, etc.\n"},{"id":4,"href":"/data-sources/ms-mswin-buildnumbers/","title":"Microsoft Windows Builds","parent":"Data Sources","content":"Windows Builds are available in JSON format at this address: https://raw.datafornerds.io/ms/mswin/buildnumbers.json. The source of this information is this site. The data is validated hourly.\nSample Data    { \u0026#34;DataForNerds\u0026#34;: { \u0026#34;LastUpdatedUTC\u0026#34;: \u0026#34;\\/Date(1625758980460)\\/\u0026#34;, \u0026#34;SourceList\u0026#34;: [ \u0026#34;https://docs.microsoft.com/en-us/windows/release-health/release-information\u0026#34;, \u0026#34;https://winreleaseinfoprod.blob.core.windows.net/winreleaseinfoprod/en-US.html\u0026#34; ] }, \u0026#34;Data\u0026#34;: [{ \u0026#34;Win10Version\u0026#34;: \u0026#34;10.0.10240.16683\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;10240.16683\u0026#34;, \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2016-02-09\u0026#34;, \u0026#34;Article\u0026#34;: \u0026#34;KB3135174\u0026#34;, \u0026#34;Comment\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;Win10Version\u0026#34;: \u0026#34;10.0.19042.1055\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;19042.1055\u0026#34;, \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2021-06-11\u0026#34;, \u0026#34;Article\u0026#34;: \u0026#34;KB5004476\u0026#34;, \u0026#34;Comment\u0026#34;: \u0026#34;Out-of-band\u0026#34; }, { \u0026#34;Win10Version\u0026#34;: \u0026#34;10.0.19043.1055\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;19043.1055\u0026#34;, \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2021-06-11\u0026#34;, \u0026#34;Article\u0026#34;: \u0026#34;KB5004476\u0026#34;, \u0026#34;Comment\u0026#34;: \u0026#34;Out-of-band\u0026#34; }, { \u0026#34;Win10Version\u0026#34;: \u0026#34;10.0.17763.2028\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;17763.2028\u0026#34;, \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2021-06-15\u0026#34;, \u0026#34;Article\u0026#34;: \u0026#34;KB5003703\u0026#34;, \u0026#34;Comment\u0026#34;: \u0026#34;Preview\u0026#34; }, { \u0026#34;Win10Version\u0026#34;: \u0026#34;10.0.10240.16769\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;10240.16769\u0026#34;, \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2016-04-12\u0026#34;, \u0026#34;Article\u0026#34;: \u0026#34;KB3147461\u0026#34;, \u0026#34;Comment\u0026#34;: \u0026#34;\u0026#34; }] } Sample Usage in PowerShell    $d4n = Invoke-RestMethod -Uri \u0026#34;https://raw.datafornerds.io/ms/mswin/buildnumbers.json\u0026#34; $props = Get-ItemProperty \u0026#39;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\u0026#39; $osVer = ([string]$props.CurrentMajorVersionNumber + \u0026#39;.\u0026#39; + [string]$props.CurrentMinorVersionNumber + \u0026#39;.\u0026#39; + [string]$props.CurrentBuildNumber + \u0026#39;.\u0026#39; + [string]$props.UBR) $myBuild = $d4n.data | Where-Object { $_.Win10Version -eq $osVer } Write-Host \u0026#34;You are running $osVer with Update $($myBuild.Article)\u0026#34; Write-Host \u0026#34;Your patch level was released by Microsoft on $($myBuild.ReleaseDate)\u0026#34; $patchDiff = New-TimeSpan -Start (Get-Date $myBuild.ReleaseDate) -End (Get-Date) If($patchDiff.TotalDays -ge 30) { Write-Host \u0026#34;It might be time to look for an updated patch!\u0026#34; -ForegroundColor Red } else { Write-Host \u0026#34;You\u0026#39;re patch is recent enough.\u0026#34; -ForegroundColor Green } "},{"id":5,"href":"/data-sources/ms-mswin-releases/","title":"Microsoft Windows Releases","parent":"Data Sources","content":"Windows Release IDs are available in JSON format at this address: https://raw.datafornerds.io/ms/mswin/buildnumbers.json. The source of this information is this site which contains a link to this data. The data is validated hourly.\nSample Data    { \u0026#34;DataForNerds\u0026#34;: { \u0026#34;LastUpdatedUTC\u0026#34;: \u0026#34;2021-07-08T15:56:35.0659636Z\u0026#34;, \u0026#34;SourceList\u0026#34;: [ \u0026#34;https://docs.microsoft.com/en-us/windows/release-health/release-information\u0026#34;, \u0026#34;https://winreleaseinfoprod.blob.core.windows.net/winreleaseinfoprod/en-US.html\u0026#34; ] }, \u0026#34;Data\u0026#34;: [{ \u0026#34;Version\u0026#34;: \u0026#34;10240\u0026#34;, \u0026#34;FullVersion\u0026#34;: \u0026#34;10.0.10240\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;1507 (RTM)\u0026#34; }, { \u0026#34;Version\u0026#34;: \u0026#34;10586\u0026#34;, \u0026#34;FullVersion\u0026#34;: \u0026#34;10.0.10586\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;1511\u0026#34; }, { \u0026#34;Version\u0026#34;: \u0026#34;19042\u0026#34;, \u0026#34;FullVersion\u0026#34;: \u0026#34;10.0.19042\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;20H2\u0026#34; }, { \u0026#34;Version\u0026#34;: \u0026#34;19043\u0026#34;, \u0026#34;FullVersion\u0026#34;: \u0026#34;10.0.19043\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;21H1\u0026#34; }] } Sample Usage in PowerShell    $d4n = Invoke-RestMethod -Uri \u0026#34;https://raw.datafornerds.io/ms/mswin/releases.json\u0026#34; $myW10Version = Get-CimInstance Win32_OperatingSystem | Select -ExpandProperty BuildNumber $myBuild = $d4n.data | Where-Object { $_.Version -eq $myW10Version } Write-Host \u0026#34;I am running Windows 10 Build Number $($myW10Version)which is $($myBuild.Build).\u0026#34; "},{"id":6,"href":"/using-the-data/","title":"Using the Data","parent":"Data for Nerds","content":""},{"id":7,"href":"/","title":"Data for Nerds","parent":"","content":"Hello World, what am I doing here?    Isn\u0026rsquo;t it crazy that, as IT professionals, we\u0026rsquo;re constantly looking to peice together information from all over the web into a useable format for querying, coding, and reporting? And it\u0026rsquo;s never in a format that\u0026rsquo;s actually useful so we either build our own database tables (that we never keep up to date), we depend on normalization products, or we come up with kluge solutions that are never maintainable long term. That\u0026rsquo;s the problem we\u0026rsquo;re trying to solve here. We want to collect the data once, put it into an easily consumed format (JSON), and then let anyone and everyone come use it.\nSo, how do I get started?    To kick things off, we have a few pretty commonly used\n"},{"id":8,"href":"/categories/","title":"Categories","parent":"Data for Nerds","content":""},{"id":9,"href":"/tags/","title":"Tags","parent":"Data for Nerds","content":""}]