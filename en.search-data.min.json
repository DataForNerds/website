[{"id":0,"href":"/data-sources/","title":"Data Sources","parent":"Data for Nerds","content":""},{"id":1,"href":"/data-sources/ms-msother-locales/","title":"Microsoft Locale IDs","parent":"Data Sources","content":"Microsoft Locale IDs (used by a number of applications) are in JSON format at this address: https://raw.datafornerds.io/ms/msother/mslocales.json. The source of this information is this site. The data is validated hourly.\nSample Data    { \u0026#34;DataForNerds\u0026#34;: { \u0026#34;LastUpdatedUTC\u0026#34;: \u0026#34;2021-07-13T15:37:31.0389417Z\u0026#34;, \u0026#34;SourceList\u0026#34;: [\u0026#34;https://docs.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a\u0026#34;] }, \u0026#34;Data\u0026#34;: [{ \u0026#34;LangCode\u0026#34;: 1025, \u0026#34;LangName\u0026#34;: \u0026#34;Arabic - Saudi Arabia\u0026#34;, \u0026#34;LangTag\u0026#34;: \u0026#34;ar-SA\u0026#34; }, { \u0026#34;LangCode\u0026#34;: 1026, \u0026#34;LangName\u0026#34;: \u0026#34;Bulgarian\u0026#34;, \u0026#34;LangTag\u0026#34;: \u0026#34;bg-BG\u0026#34; }, { \u0026#34;LangCode\u0026#34;: 1027, \u0026#34;LangName\u0026#34;: \u0026#34;Catalan\u0026#34;, \u0026#34;LangTag\u0026#34;: \u0026#34;ca-ES\u0026#34; }, { \u0026#34;LangCode\u0026#34;: 1033, \u0026#34;LangName\u0026#34;: \u0026#34;English - United States\u0026#34;, \u0026#34;LangTag\u0026#34;: \u0026#34;en-US\u0026#34; }, { \u0026#34;LangCode\u0026#34;: 1034, \u0026#34;LangName\u0026#34;: \u0026#34;Spanish - Spain (Traditional Sort)\u0026#34;, \u0026#34;LangTag\u0026#34;: \u0026#34;es-ES\u0026#34; }, { \u0026#34;LangCode\u0026#34;: 58378, \u0026#34;LangName\u0026#34;: \u0026#34;Spanish - Latin America\u0026#34;, \u0026#34;LangTag\u0026#34;: \u0026#34;es-419\u0026#34; }, { \u0026#34;LangCode\u0026#34;: 58380, \u0026#34;LangName\u0026#34;: \u0026#34;French - North Africa\u0026#34;, \u0026#34;LangTag\u0026#34;: \u0026#34;fr-015\u0026#34; }] } Sample Usage in PowerShell    $d4nData = Invoke-WebRequest \u0026#34;https://raw.datafornerds.io/ms/msother/mslocales.json\u0026#34; | Select -ExpandProperty Content | ConvertFrom-Json Write-Host \u0026#34;The following locales include English in the name\u0026#34; $d4nData.Data | Where-Object { $_.LangName -like \u0026#34;*English*\u0026#34; } | Format-Table -AutoSize "},{"id":2,"href":"/data-sources/ms-msapps-buildnumbers/","title":"Microsoft M365 Apps Builds","parent":"Data Sources","content":"Microsoft M365 Apps for Business (formerly Office 365) build numbers are in JSON format at this address: https://raw.datafornerds.io/ms/msapps/buildnumbers.json. The source of this information is this site. The data is validated hourly.\nSample Data    { \u0026#34;DataForNerds\u0026#34;: { \u0026#34;LastUpdatedUTC\u0026#34;: \u0026#34;\\/Date(1625771575455)\\/\u0026#34;, \u0026#34;SourceList\u0026#34;: [\u0026#34;https://docs.microsoft.com/en-us/officeupdates/update-history-microsoft365-apps-by-date\u0026#34;] }, \u0026#34;Data\u0026#34;: [{ \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2017-12-12\u0026#34;, \u0026#34;Channel\u0026#34;: \u0026#34;Semi-Annual Enterprise\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;7766.2130\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;1701\u0026#34;, \u0026#34;FullBuild\u0026#34;: \u0026#34;16.0.7766.2130\u0026#34; }, { \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2018-08-14\u0026#34;, \u0026#34;Channel\u0026#34;: \u0026#34;Semi-Annual Enterprise\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34; 8431.2299\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;1708\u0026#34;, \u0026#34;FullBuild\u0026#34;: \u0026#34;16.0. 8431.2299\u0026#34; }, { \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2021-12-06\u0026#34;, \u0026#34;Channel\u0026#34;: \u0026#34;Current\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;8730.2122\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;1711\u0026#34;, \u0026#34;FullBuild\u0026#34;: \u0026#34;16.0.8730.2122\u0026#34; }] } Sample Usage in PowerShell    $d4n = Invoke-RestMethod -Uri \u0026#34;https://raw.datafornerds.io/ms/msapps/buildnumbers.json\u0026#34; Write-Host \u0026#34;Builds Released in Past 7 days\u0026#34; ForEach($build in $d4n.Data) { $diff = New-TimeSpan -Start (Get-Date $build.ReleaseDate) -End (Get-Date) If($diff.TotalDays -le 7) { Write-Host \u0026#34;Office 365 Version $($build.FullBuild)is $($build.Version)and was released $($build.ReleaseDate)\u0026#34; } else { \u0026lt;# Do Nothing #\u0026gt; } } "},{"id":3,"href":"/using-the-data/powerbi/","title":"Microsoft PowerBI","parent":"Using the Data","content":"The data from DataForNerds can be brought into PowerBI using the Web data source type. The following steps outline the overall steps to gather the data.\n Launch PowerBI Desktop. Create a new report or open an existing report. From the Home ribbon, select Get Data. Either select Web from the drop down (if available), or select More and then choose Web from the resulting dialog box. Enter the URL to the JSON file (e.g. https://raw.datafornerds.io/ms/mswin/releases.json) and click OK. You may be prompted for authentication parameters (you can use anonymous authentication) or be prompted to apply your new changes to the report.  The data is now available as a source within your PowerBI report that can be linked to existing data and displayed.\n"},{"id":4,"href":"/using-the-data/powershell/","title":"Microsoft PowerShell","parent":"Using the Data","content":"The data from DataForNerds can be brought into PowerShell as a Custom Object using the Invoke-RestMethod command and passing it the JSON URL as the uri parameter. For example:\n$d4n = Invoke-RestMethod -Uri \u0026#34;https://raw.datafornerds.io/ms/mswin/releases.json\u0026#34; The resulting object typically have two properties:\n   Property Purpose     DataForNerds Metadata containing at least the information about the last time the content was updated (LastUpdatedUTC property) and where we got the information from (SourceList property).   Data The actual data you\u0026rsquo;re looking for.    To view the data in PowerShell, output the data property. For example:\n$d4n = Invoke-RestMethod -Uri \u0026#34;https://raw.datafornerds.io/ms/mswin/releases.json\u0026#34; $d4n.Data | Format-Table -AutoSize You can use the Data property like any other array of objects in PowerShell. It can be viewed, sorted, queried, exported, etc.\n"},{"id":5,"href":"/data-sources/ms-mswin-buildnumbers/","title":"Microsoft Windows Builds","parent":"Data Sources","content":"Windows Builds are available in JSON format at this address: https://raw.datafornerds.io/ms/mswin/buildnumbers.json. The source of this information is this site. The data is validated hourly.\nSample Data    { \u0026#34;DataForNerds\u0026#34;: { \u0026#34;LastUpdatedUTC\u0026#34;: \u0026#34;\\/Date(1625758980460)\\/\u0026#34;, \u0026#34;SourceList\u0026#34;: [ \u0026#34;https://docs.microsoft.com/en-us/windows/release-health/release-information\u0026#34;, \u0026#34;https://winreleaseinfoprod.blob.core.windows.net/winreleaseinfoprod/en-US.html\u0026#34; ] }, \u0026#34;Data\u0026#34;: [{ \u0026#34;Win10Version\u0026#34;: \u0026#34;10.0.10240.16683\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;10240.16683\u0026#34;, \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2016-02-09\u0026#34;, \u0026#34;Article\u0026#34;: \u0026#34;KB3135174\u0026#34;, \u0026#34;Comment\u0026#34;: \u0026#34;\u0026#34; }, { \u0026#34;Win10Version\u0026#34;: \u0026#34;10.0.19042.1055\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;19042.1055\u0026#34;, \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2021-06-11\u0026#34;, \u0026#34;Article\u0026#34;: \u0026#34;KB5004476\u0026#34;, \u0026#34;Comment\u0026#34;: \u0026#34;Out-of-band\u0026#34; }, { \u0026#34;Win10Version\u0026#34;: \u0026#34;10.0.19043.1055\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;19043.1055\u0026#34;, \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2021-06-11\u0026#34;, \u0026#34;Article\u0026#34;: \u0026#34;KB5004476\u0026#34;, \u0026#34;Comment\u0026#34;: \u0026#34;Out-of-band\u0026#34; }, { \u0026#34;Win10Version\u0026#34;: \u0026#34;10.0.17763.2028\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;17763.2028\u0026#34;, \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2021-06-15\u0026#34;, \u0026#34;Article\u0026#34;: \u0026#34;KB5003703\u0026#34;, \u0026#34;Comment\u0026#34;: \u0026#34;Preview\u0026#34; }, { \u0026#34;Win10Version\u0026#34;: \u0026#34;10.0.10240.16769\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;10240.16769\u0026#34;, \u0026#34;ReleaseDate\u0026#34;: \u0026#34;2016-04-12\u0026#34;, \u0026#34;Article\u0026#34;: \u0026#34;KB3147461\u0026#34;, \u0026#34;Comment\u0026#34;: \u0026#34;\u0026#34; }] } Sample Usage in PowerShell    $d4n = Invoke-RestMethod -Uri \u0026#34;https://raw.datafornerds.io/ms/mswin/buildnumbers.json\u0026#34; $props = Get-ItemProperty \u0026#39;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\u0026#39; $osVer = ([string]$props.CurrentMajorVersionNumber + \u0026#39;.\u0026#39; + [string]$props.CurrentMinorVersionNumber + \u0026#39;.\u0026#39; + [string]$props.CurrentBuildNumber + \u0026#39;.\u0026#39; + [string]$props.UBR) $myBuild = $d4n.data | Where-Object { $_.Win10Version -eq $osVer } Write-Host \u0026#34;You are running $osVer with Update $($myBuild.Article)\u0026#34; Write-Host \u0026#34;Your patch level was released by Microsoft on $($myBuild.ReleaseDate)\u0026#34; $patchDiff = New-TimeSpan -Start (Get-Date $myBuild.ReleaseDate) -End (Get-Date) If($patchDiff.TotalDays -ge 30) { Write-Host \u0026#34;It might be time to look for an updated patch!\u0026#34; -ForegroundColor Red } else { Write-Host \u0026#34;You\u0026#39;re patch is recent enough.\u0026#34; -ForegroundColor Green } "},{"id":6,"href":"/data-sources/ms-mswin-releases/","title":"Microsoft Windows Releases","parent":"Data Sources","content":"Windows Release IDs are available in JSON format at this address: https://raw.datafornerds.io/ms/mswin/buildnumbers.json. The source of this information is this site which contains a link to this data. The data is validated hourly.\nSample Data    { \u0026#34;DataForNerds\u0026#34;: { \u0026#34;LastUpdatedUTC\u0026#34;: \u0026#34;2021-07-08T15:56:35.0659636Z\u0026#34;, \u0026#34;SourceList\u0026#34;: [ \u0026#34;https://docs.microsoft.com/en-us/windows/release-health/release-information\u0026#34;, \u0026#34;https://winreleaseinfoprod.blob.core.windows.net/winreleaseinfoprod/en-US.html\u0026#34; ] }, \u0026#34;Data\u0026#34;: [{ \u0026#34;Version\u0026#34;: \u0026#34;10240\u0026#34;, \u0026#34;FullVersion\u0026#34;: \u0026#34;10.0.10240\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;1507 (RTM)\u0026#34; }, { \u0026#34;Version\u0026#34;: \u0026#34;10586\u0026#34;, \u0026#34;FullVersion\u0026#34;: \u0026#34;10.0.10586\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;1511\u0026#34; }, { \u0026#34;Version\u0026#34;: \u0026#34;19042\u0026#34;, \u0026#34;FullVersion\u0026#34;: \u0026#34;10.0.19042\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;20H2\u0026#34; }, { \u0026#34;Version\u0026#34;: \u0026#34;19043\u0026#34;, \u0026#34;FullVersion\u0026#34;: \u0026#34;10.0.19043\u0026#34;, \u0026#34;Build\u0026#34;: \u0026#34;21H1\u0026#34; }] } Sample Usage in PowerShell    $d4n = Invoke-RestMethod -Uri \u0026#34;https://raw.datafornerds.io/ms/mswin/releases.json\u0026#34; $myW10Version = Get-CimInstance Win32_OperatingSystem | Select -ExpandProperty BuildNumber $myBuild = $d4n.data | Where-Object { $_.Version -eq $myW10Version } Write-Host \u0026#34;I am running Windows 10 Build Number $($myW10Version)which is $($myBuild.Build).\u0026#34; "},{"id":7,"href":"/using-the-data/","title":"Using the Data","parent":"Data for Nerds","content":""},{"id":8,"href":"/about-us/","title":"About Us","parent":"Data for Nerds","content":""},{"id":9,"href":"/","title":"Data for Nerds","parent":"","content":"Hello World, what am I doing here?    Isn\u0026rsquo;t it crazy that, as IT professionals, we\u0026rsquo;re constantly looking to piece together information from all over the web into a useable format for querying, coding, and reporting? And it\u0026rsquo;s never in a format that\u0026rsquo;s actually useful so we either build our own database tables (that we never keep up to date), we depend on normalization products, or we come up with kluge solutions that are never maintainable long term. That\u0026rsquo;s the problem we\u0026rsquo;re trying to solve here. We want to collect the data once, put it into an easily consumed format (JSON), and then let anyone and everyone come use it.\nSo, how do I get started?    To kick things off, we have a few pretty commonly used data sources that you\u0026rsquo;ll find in the left column of this page. You can also see the \u0026ldquo;Using the Data\u0026rdquo; section to learn how you can bring this data into your environment.\n"},{"id":10,"href":"/get-involved/","title":"Get Involved","parent":"Data for Nerds","content":""},{"id":11,"href":"/about-us/how-does-it-work/","title":"How does this work?","parent":"About Us","content":"The Scripts    The entire process starts with a script that collects the data in its current, less-than-usable, format and convertings the data into JSON. These scripts are stored in our GitHub repository under the scripts folder. When the script runs, it outputs the data into the content folder within the repository.\nThe GitHub Actions    We\u0026rsquo;re fortunate that GitHub has provided an easy way to run PowerShell scripts on a scheduled basis using PowerShell Core running on Ubuntu. These jobs are triggered on a regular schedule and are stored in the .github/workflows folder of the repository. When there is an update to the file, the action automatically generates a pull request for the change and a DataForNerds contributer verifies that it\u0026rsquo;s OK and then accepts the pull request, which updates the main repository.\nThe Content Delivery Network    As GitHub has limits to how often you can hit a repository before they start asking the owner to host somewhere else, we\u0026rsquo;re using Amazon\u0026rsquo;s CDN in front of the GitHub repository. The CDN, named CloudFront, caches our content across hundreds of servers across the globe for quick and easy access to the data. We typically cache pages for about an hour. We do ask that even when you inevitably find out what the underlying URLs are for the content behind the CDN that you continue to use the CDN address as it\u0026rsquo;s there to take the load off of the backend, ensure we comply with our hosts wishes, and also should never change even as the background infrastructure does change.\n"},{"id":12,"href":"/get-involved/getinvolved/","title":"How to Get Involved","parent":"Get Involved","content":"Getting Involved    If you\u0026rsquo;re interested in getting involved with DataForNerds.io, please check out:\n  Our GitHub Respository for where we generate the JSON files, perhaps you know a better way to do something or have another datasource to add. Check our our issues list to see if there\u0026rsquo;s something you might be able to fix.\n  Our Website Repository if you notice a typo or have a better way to describe something.\n  Have an idea for a new source of data? Check out our Ideas Discussion Page.\n  "},{"id":13,"href":"/about-us/terms-of-use/","title":"Terms of Use","parent":"About Us","content":"The Data (JSON Files)    Ultimately, you are free to do whatever you wish with the data, so long as it doesn\u0026rsquo;t violate any of the rights of the creators of the data (e.g. Microsoft). You can manipulate it and even remove the DataForNerds header that we put at the top. If you use the data in any of your projects, it would be awesome if you attributed us, but it\u0026rsquo;s not required.\nAccessing the Data    You can access our data in one of three ways:\n Our Content Delivery Network (CDN), which is just the data URLs (e.g. http://localhost:1313/data-sources/ms-mswin-releases/). By including our repository as a submodule of your own project (in line with GitHubs terms of use, when applicable). Downloading the files to be used offline, through any method that works for you.  We ask that you do not access the files using the underlying GitHub hosting (GitHub Pages) as there are hard and soft limits to how much content can be pulled using this method, and we\u0026rsquo;d rather not have to move around because we start to test these limits.\nPlease Cache Data!    If you plan on using this data in any large projects that would put a lot of load on our CDN, we\u0026rsquo;d ask that you put some thought into caching the data on your end and making less frequent requests to DataForNerds.io when possible. This is a personally funded project not presently backed by any one with deep pockets.\n"},{"id":14,"href":"/about-us/about-us/","title":"Who is DataForNerds?","parent":"About Us","content":"Our Origin Story    DataForNerds.io was started in July of 2021 by Chris Kibble who was hopeful there would eventually be an easily queryable list of Windows 10 Releases for his SQL and PowerBI reports that mapped the installed version (e.g. build 19041 is actually commercially referred to as 20H1). When that didn\u0026rsquo;t happen he just decided to do it himself.\nContributers    Chris Kibble    Chris started DataForNerds.io in July of 2021 (see origin story above) and has written, so far, all of the datasources as well as the website, although he is hopeful that other folks will want to contribute to the project long term. Chris is primarily focused on Configuration Manager, Intune, SQL and PowerShell. He is a member of the WinAdmins user group (and invites everyone to join!) and can be found online at his blog and twitter.\n"},{"id":15,"href":"/categories/","title":"Categories","parent":"Data for Nerds","content":""},{"id":16,"href":"/tags/","title":"Tags","parent":"Data for Nerds","content":""}]